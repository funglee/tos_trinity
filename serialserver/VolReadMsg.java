/**
 * This class is automatically generated by mig. DO NOT EDIT THIS FILE.
 * This class implements a Java interface to the 'VolReadMsg'
 * message type.
 */

public class VolReadMsg extends net.tinyos.message.Message {

    /** The default size of this message type in bytes. */
    public static final int DEFAULT_MESSAGE_SIZE = 18;

    /** The Active Message type associated with this message. */
    public static final int AM_TYPE = 135;

    /** Create a new VolReadMsg of size 18. */
    public VolReadMsg() {
        super(DEFAULT_MESSAGE_SIZE);
        amTypeSet(AM_TYPE);
    }

    /** Create a new VolReadMsg of the given data_length. */
    public VolReadMsg(int data_length) {
        super(data_length);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new VolReadMsg with the given data_length
     * and base offset.
     */
    public VolReadMsg(int data_length, int base_offset) {
        super(data_length, base_offset);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new VolReadMsg using the given byte array
     * as backing store.
     */
    public VolReadMsg(byte[] data) {
        super(data);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new VolReadMsg using the given byte array
     * as backing store, with the given base offset.
     */
    public VolReadMsg(byte[] data, int base_offset) {
        super(data, base_offset);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new VolReadMsg using the given byte array
     * as backing store, with the given base offset and data length.
     */
    public VolReadMsg(byte[] data, int base_offset, int data_length) {
        super(data, base_offset, data_length);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new VolReadMsg embedded in the given message
     * at the given base offset.
     */
    public VolReadMsg(net.tinyos.message.Message msg, int base_offset) {
        super(msg, base_offset, DEFAULT_MESSAGE_SIZE);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new VolReadMsg embedded in the given message
     * at the given base offset and length.
     */
    public VolReadMsg(net.tinyos.message.Message msg, int base_offset, int data_length) {
        super(msg, base_offset, data_length);
        amTypeSet(AM_TYPE);
    }

    /**
    /* Return a String representation of this message. Includes the
     * message type name and the non-indexed field values.
     */
    public String toString() {
      String s = "Message <VolReadMsg> \n";
      try {
        s += "  [node_id=0x"+Long.toHexString(get_node_id())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [data_id=0x"+Long.toHexString(get_data_id())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [data_max=0x"+Long.toHexString(get_data_max())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [data_min=0x"+Long.toHexString(get_data_min())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [data_mean=0x"+Long.toHexString(get_data_mean())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      return s;
    }

    // Message-type-specific access methods appear below.

    /////////////////////////////////////////////////////////
    // Accessor methods for field: node_id
    //   Field type: int, unsigned
    //   Offset (bits): 0
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'node_id' is signed (false).
     */
    public static boolean isSigned_node_id() {
        return false;
    }

    /**
     * Return whether the field 'node_id' is an array (false).
     */
    public static boolean isArray_node_id() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'node_id'
     */
    public static int offset_node_id() {
        return (0 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'node_id'
     */
    public static int offsetBits_node_id() {
        return 0;
    }

    /**
     * Return the value (as a int) of the field 'node_id'
     */
    public int get_node_id() {
        return (int)getUIntBEElement(offsetBits_node_id(), 16);
    }

    /**
     * Set the value of the field 'node_id'
     */
    public void set_node_id(int value) {
        setUIntBEElement(offsetBits_node_id(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'node_id'
     */
    public static int size_node_id() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'node_id'
     */
    public static int sizeBits_node_id() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: data_id
    //   Field type: long, unsigned
    //   Offset (bits): 16
    //   Size (bits): 32
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'data_id' is signed (false).
     */
    public static boolean isSigned_data_id() {
        return false;
    }

    /**
     * Return whether the field 'data_id' is an array (false).
     */
    public static boolean isArray_data_id() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'data_id'
     */
    public static int offset_data_id() {
        return (16 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'data_id'
     */
    public static int offsetBits_data_id() {
        return 16;
    }

    /**
     * Return the value (as a long) of the field 'data_id'
     */
    public long get_data_id() {
        return (long)getUIntBEElement(offsetBits_data_id(), 32);
    }

    /**
     * Set the value of the field 'data_id'
     */
    public void set_data_id(long value) {
        setUIntBEElement(offsetBits_data_id(), 32, value);
    }

    /**
     * Return the size, in bytes, of the field 'data_id'
     */
    public static int size_data_id() {
        return (32 / 8);
    }

    /**
     * Return the size, in bits, of the field 'data_id'
     */
    public static int sizeBits_data_id() {
        return 32;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: data_max
    //   Field type: long, unsigned
    //   Offset (bits): 48
    //   Size (bits): 32
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'data_max' is signed (false).
     */
    public static boolean isSigned_data_max() {
        return false;
    }

    /**
     * Return whether the field 'data_max' is an array (false).
     */
    public static boolean isArray_data_max() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'data_max'
     */
    public static int offset_data_max() {
        return (48 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'data_max'
     */
    public static int offsetBits_data_max() {
        return 48;
    }

    /**
     * Return the value (as a long) of the field 'data_max'
     */
    public long get_data_max() {
        return (long)getUIntBEElement(offsetBits_data_max(), 32);
    }

    /**
     * Set the value of the field 'data_max'
     */
    public void set_data_max(long value) {
        setUIntBEElement(offsetBits_data_max(), 32, value);
    }

    /**
     * Return the size, in bytes, of the field 'data_max'
     */
    public static int size_data_max() {
        return (32 / 8);
    }

    /**
     * Return the size, in bits, of the field 'data_max'
     */
    public static int sizeBits_data_max() {
        return 32;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: data_min
    //   Field type: long, unsigned
    //   Offset (bits): 80
    //   Size (bits): 32
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'data_min' is signed (false).
     */
    public static boolean isSigned_data_min() {
        return false;
    }

    /**
     * Return whether the field 'data_min' is an array (false).
     */
    public static boolean isArray_data_min() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'data_min'
     */
    public static int offset_data_min() {
        return (80 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'data_min'
     */
    public static int offsetBits_data_min() {
        return 80;
    }

    /**
     * Return the value (as a long) of the field 'data_min'
     */
    public long get_data_min() {
        return (long)getUIntBEElement(offsetBits_data_min(), 32);
    }

    /**
     * Set the value of the field 'data_min'
     */
    public void set_data_min(long value) {
        setUIntBEElement(offsetBits_data_min(), 32, value);
    }

    /**
     * Return the size, in bytes, of the field 'data_min'
     */
    public static int size_data_min() {
        return (32 / 8);
    }

    /**
     * Return the size, in bits, of the field 'data_min'
     */
    public static int sizeBits_data_min() {
        return 32;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: data_mean
    //   Field type: long, unsigned
    //   Offset (bits): 112
    //   Size (bits): 32
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'data_mean' is signed (false).
     */
    public static boolean isSigned_data_mean() {
        return false;
    }

    /**
     * Return whether the field 'data_mean' is an array (false).
     */
    public static boolean isArray_data_mean() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'data_mean'
     */
    public static int offset_data_mean() {
        return (112 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'data_mean'
     */
    public static int offsetBits_data_mean() {
        return 112;
    }

    /**
     * Return the value (as a long) of the field 'data_mean'
     */
    public long get_data_mean() {
        return (long)getUIntBEElement(offsetBits_data_mean(), 32);
    }

    /**
     * Set the value of the field 'data_mean'
     */
    public void set_data_mean(long value) {
        setUIntBEElement(offsetBits_data_mean(), 32, value);
    }

    /**
     * Return the size, in bytes, of the field 'data_mean'
     */
    public static int size_data_mean() {
        return (32 / 8);
    }

    /**
     * Return the size, in bits, of the field 'data_mean'
     */
    public static int sizeBits_data_mean() {
        return 32;
    }

}
